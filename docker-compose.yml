# Common network for all services
networks:
  campuslearn-net:
    driver: bridge

volumes:
  mongo_data:

services:
  # ---------- Infra ----------
  mongo:
    image: mongo:7
    container_name: campuslearn-mongo
    ports: ["27017:27017"]
    networks: [campuslearn-net]
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'mongosh --quiet --eval "db.adminCommand(''ping'').ok" | grep 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7
    container_name: campuslearn-redis
    ports: ["6379:6379"]
    networks: [campuslearn-net]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # ---------- Dev profile ----------
  api-dev:
    profiles: ["dev"]
    image: node:20-alpine
    container_name: campuslearn-api-dev
    working_dir: /app
    networks: [campuslearn-net]
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      # If you prefer service names in Docker network:
      # MONGO_URI: mongodb://mongo:27017/campuslearn
      # REDIS_URL: redis://redis:6379
      # Ensure backend/.env matches what your code expects.
      NODE_ENV: development
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: sh -c "npm ci && npm run dev"

  web-dev:
    profiles: ["dev"]
    image: node:20-alpine
    container_name: campuslearn-web-dev
    working_dir: /app
    networks: [campuslearn-net]
    depends_on:
      api-dev:
        condition: service_started
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: sh -c "npm ci && npm run dev -- --host 0.0.0.0"

  # ---------- Prod profile ----------
  api:
    profiles: ["prod"]
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: campuslearn-api
    networks: [campuslearn-net]
    env_file:
      - ./backend/.env
    environment:
      NODE_ENV: production
      # If you want to force container-internal endpoints:
      # MONGO_URI: mongodb://mongo:27017/campuslearn
      # REDIS_URL: redis://redis:6379
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    profiles: ["prod"]
    build:
      context: ./frontend
      dockerfile: Dockerfile.nginx
    container_name: campuslearn-web
    networks: [campuslearn-net]
    depends_on:
      api:
        condition: service_started
    ports:
      - "8080:80"
